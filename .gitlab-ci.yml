
"before_script":
#- "helm registry login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${REGISTRY_HOST}"
- "export CHART_VER=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//')"
- "export CHART_REL=$(git rev-list --count v${CHART_VER}..HEAD 2>/dev/null )"
#- docker info

"build":
  "stage": "build"
  "image": "registry.cnct.io/team-nes/grpc-example/rootfs/golang-protoc"
  "artifacts":
    "paths":
    - "${CHART_NAME}"
  "script":
  - "go get -u google.golang.org/grpc"
  - "go get -u github.com/golang/protobuf/protoc-gen-go"
  - "protoc -I api/ api/hello.proto --go_out=plugins=grpc:api"
  - "go build -o rootfs/grpc_server/server ./server"
  - "go build -o rootfs/grpc_server/client ./client"
  "artifacts":
    untracked: true
    
"unit-tests":
  "stage": "build"
  "image": "registry.cnct.io/team-nes/grpc-example/rootfs/golang-protoc"
  "script":
  - "go test server/*test.go"
  - "go test client/*test.go"

"build_image":
  "stage": "docker"
  services:
  - docker:dind
  dependencies: 
  - build
  image: docker:latest
  before_script:
  - docker info
  - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_HOST/$REGISTRY_ORG
  script:
    - docker build -t "$REGISTRY_HOST/$REGISTRY_ORG/$APP_NAME:$HELM_REGISTRY_VERSION" rootfs/grpc_server
    - docker push $REGISTRY_HOST/$REGISTRY_ORG/$APP_NAME:$HELM_REGISTRY_VERSION

"publish_helm":
  "only":
  - "master"
  "dependencies": 
  - "build_image"
  "image": $HELM_REGISTRY_IMAGE
  "script":
  - "cd charts/grpc"
  - "helm registry push $REGISTRY_HOST/$REGISTRY_ORG/$REGISTRY_CHART_NAME -c beta"
  "stage": "helm"
  
"lint_helm":
  "image": $HELM_REGISTRY_IMAGE
  "script":
  - "cd charts/grpc"
  - "helm lint"
  "stage": "helm"

"report-status":
  "after_script":
  - "curl -XPOST https://failfast.ci.cnct.io//api/v1/github_statuses -d \"{\\\"ci_project_id\\\": \\\"$CI_PROJECT_ID\\\", \\\"ci_sha\\\": \\\"$CI_BUILD_REF\\\", \\\"sha\\\": \\\"$SHA\\\", \\\"ci_ref\\\": \\\"$CI_COMMIT_REF_NAME\\\", \\\"github_repo\\\": \\\"$GITHUB_REPO\\\", \\\"installation_id\\\": \\\"$GITHUB_INSTALLATION_ID\\\", \\\"delay\\\": 30}\" || true"
  - "curl -XPOST https://failfast.ci.cnct.io//api/v1/github_statuses -d \"{\\\"ci_project_id\\\": \\\"$CI_PROJECT_ID\\\", \\\"ci_sha\\\": \\\"$CI_BUILD_REF\\\", \\\"sha\\\": \\\"$SHA\\\", \\\"ci_ref\\\": \\\"$CI_COMMIT_REF_NAME\\\", \\\"github_repo\\\": \\\"$GITHUB_REPO\\\", \\\"installation_id\\\": \\\"$GITHUB_INSTALLATION_ID\\\", \\\"delay\\\": 150}\" || true"
  "before_script": []
  "image": "python:2.7"
  "script":
  - "echo curl -XPOST https://failfast.ci.cnct.io//api/v1/github_statuses -d \"{\\\"ci_project_id\\\": \\\"$CI_PROJECT_ID\\\", \\\"ci_sha\\\": \\\"$CI_BUILD_REF\\\", \\\"sha\\\": \\\"$SHA\\\", \\\"ci_ref\\\": \\\"$CI_COMMIT_REF_NAME\\\", \\\"github_repo\\\": \\\"$GITHUB_REPO\\\", \\\"installation_id\\\": \\\"$GITHUB_INSTALLATION_ID\\\", \\\"delay\\\": 30}\" || true"
  - "echo curl -XPOST https://failfast.ci.cnct.io//api/v1/github_statuses -d \"{\\\"ci_project_id\\\": \\\"$CI_PROJECT_ID\\\", \\\"ci_sha\\\": \\\"$CI_BUILD_REF\\\", \\\"sha\\\": \\\"$SHA\\\", \\\"ci_ref\\\": \\\"$CI_COMMIT_REF_NAME\\\", \\\"github_repo\\\": \\\"$GITHUB_REPO\\\", \\\"installation_id\\\": \\\"$GITHUB_INSTALLATION_ID\\\", \\\"delay\\\": 150}\" || true"
  "stage": "github-status-update"
  "tags":
  - "failfast-ci"
  "when": "always"
  
"stages":
- "build"
- "docker"
- "helm"
- "deploy"
- "github-status-update"

#"test":
#  "before_script":
#  - "mkdir /root/.kube"
#  - "echo ${TEST_KUBECONFIG} | base64 -d > /root/.kube/config"
#  - "helm init"
#  - "helm delete --purge ${RELEASE} || /bin/echo \"${RELEASE} does not exist. Environment is clean.\""
#  - "kubectl delete namespace ${NAMESPACE} || /bin/echo \"${NAMESPACE} does not exist. Environment is clean.\""
#  "image": "quay.io/samsung_cnct/kraken-tools:v0.8"
#  "script":
#  - "build/test.sh"
#  - "helm install --name ${RELEASE} --namespace ${NAMESPACE} ${APP_NAME}"
#  - "kubectl rollout status sts/${DEPLOYMENT} -n ${NAMESPACE}"
#  - "helm delete --purge ${RELEASE}"
#  - "kubectl delete namespace ${NAMESPACE}"
#  "stage": "test"
#  "variables":
#    "DEPLOYMENT": "${APP_NAME}-${CI_PIPELINE_ID}-${APP_NAME}"
#    "NAMESPACE": "${APP_NAME}-test-${CI_PIPELINE_ID}"
#    "RELEASE": "${APP_NAME}-${CI_PIPELINE_ID}"
"variables":
  "PROTOC_VERSION": "3.5.1"
  "APP_NAME": "grpc-example"
  "REGISTRY_CHART_NAME": "kraken_grpc"
  "CHART_REGISTRY_URI": "${REGISTRY_HOST}/${REGISTRY_ORG}/${REGISTRY_CHART_NAME}"
  "CI_REF": "refs/heads/master"
  "EVENT": "push"
  "FAILFASTCI_STATUS_API": "https://failfast.ci.cnct.io//api/v1/github_status"
  "GITHUB_INSTALLATION_ID": "64807"
  "GITHUB_REPO": "samsung-cnct/chart-vault-etcd"
  "HELM_REGISTRY_IMAGE": "quay.io/samsung_cnct/helm-registry-agent"
  "HELM_REGISTRY_VERSION": "v0.7.4-helm_2.6"
  "KUBECTL_VERSION": "v1.8.5"
  "PR_ID": ""
  "REF_NAME": "master"
  "REGISTRY_CHART_NAME": "grpc-example"
  "REGISTRY_HOST": "quay.io"
  "REGISTRY_ORG": "samsung_cnct"
  "SHA": "f53efd52a424af41c725dddbd8db187c89dd5b8c"
  "SHA8": "f53efd52"
  "SOURCE_REF": "master"
  "DOCKER_HOST": tcp://localhost:2375
  "DOCKER_DRIVER": overlay2
