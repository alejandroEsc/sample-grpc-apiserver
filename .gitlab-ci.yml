"before_script":
#- "helm registry login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${REGISTRY_HOST}"
- "export CHART_VER=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//')"
- "export CHART_REL=$(git rev-list --count v${CHART_VER}..HEAD 2>/dev/null )"
#- docker info

"build":
  "image": "golang:1.9"
  "artifacts":
    "paths":
    - "${CHART_NAME}"
  "script":
  - "go get -u google.golang.org/grpc"
  - "go get -u github.com/golang/protobuf/protoc-gen-go"
  - "wget https://github.com/google/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-aarch_64.zip"
  - "gunzip protoc-${PROTOC_VERSION}-linux-aarch_64.zip"
  - "bin/protoc -I api/ api/hello.proto --go_out=plugins=grpc:api"
  - "go build"

"build_image":
  script:
    - docker build -t "$HELM_REGISTRY_IMAGE:$HELM_REGISTRY_VERSION" rootfs/groc_server
#   - docker run my-docker-image /script/to/run/tests
#    "stage": "build image"

"deploy-staging":
  "before_script":
  - "mkdir /root/.kube"
  - "echo ${STAGING_KUBECONFIG} | base64 -d > /root/.kube/config"
  - "helm init --client-only"
  - "wget https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-amd64.tar.gz"
  - "tar -C /usr/local -xzf go1.9.2.linux-amd64.tar.gz"
  - "mkdir /go"
  - "export PATH=$PATH:/usr/local/go/bin:/go/bin"
  - "export GOPATH=/go"
  - "mkdir /lib64 && ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2"
  - "apk add --no-cache --virtual .build-deps gcc build-base libtool sqlite-dev"
  - "go get -u github.com/cloudflare/cfssl/cmd/cfssl"
  - "go get -u github.com/cloudflare/cfssl/cmd/cfssljson"
  - "wget https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
  - "chmod +x ./kubectl"
  - "mv ./kubectl /usr/local/bin/kubectl"
  - "cd ${APP_NAME}"
  - "./tls-generator/generate-certs.sh"
  "only":
  - "/v[0-9]+\\.[0-9]+\\.[0-9]/"
  "script":
  - "export HELM_OPTS=\"--install --namespace ${NAMESPACE} --set service.tls.enable=true \""
  - "helm registry upgrade ${CHART_REGISTRY_URI}:${CHART_REGISTRY_CHANNEL} -- ${APP_NAME} ${HELM_OPTS}"
  "stage": "deploy"
  "variables":
    "CHART_REGISTRY_CHANNEL": "prod"
    "GEN_CLIENT_NAMESPACES": "vault-etcd-staging vault-staging"
    "GEN_CLIENT_SECRET_NAME": "etcd-client-tls"
    "GEN_CLUSTER_SIZE": !!int "3"
    "GEN_NAMESPACE": "${APP_NAME}-staging"
    "GEN_PEER_SECRET_NAME": "etcd-peer-tls"
    "GEN_SERVER_SECRET_NAME": "etcd-server-tls"
    "GEN_STATEFULSET_NAME": "${APP_NAME}-${APP_NAME}"
    "NAMESPACE": "${APP_NAME}-staging"
"image": "$HELM_REGISTRY_IMAGE:$HELM_REGISTRY_VERSION"
"publish-beta":
  "only":
  - "master"
  "script":
  - "cd ${APP_NAME}"
  - "helm registry push ${CHART_REGISTRY_URI} -c beta"
  "stage": "publish"
"publish-prod":
  "only":
  - "/v[0-9]+\\.[0-9]+\\.[0-9]/"
  "script":
  - "cd ${APP_NAME}"
  - "helm registry push ${CHART_REGISTRY_URI} -c stable"
  "stage": "publish"
"report-status":
  "after_script":
  - "curl -XPOST https://failfast.ci.cnct.io//api/v1/github_statuses -d \"{\\\"ci_project_id\\\": \\\"$CI_PROJECT_ID\\\", \\\"ci_sha\\\": \\\"$CI_BUILD_REF\\\", \\\"sha\\\": \\\"$SHA\\\", \\\"ci_ref\\\": \\\"$CI_COMMIT_REF_NAME\\\", \\\"github_repo\\\": \\\"$GITHUB_REPO\\\", \\\"installation_id\\\": \\\"$GITHUB_INSTALLATION_ID\\\", \\\"delay\\\": 30}\" || true"
  - "curl -XPOST https://failfast.ci.cnct.io//api/v1/github_statuses -d \"{\\\"ci_project_id\\\": \\\"$CI_PROJECT_ID\\\", \\\"ci_sha\\\": \\\"$CI_BUILD_REF\\\", \\\"sha\\\": \\\"$SHA\\\", \\\"ci_ref\\\": \\\"$CI_COMMIT_REF_NAME\\\", \\\"github_repo\\\": \\\"$GITHUB_REPO\\\", \\\"installation_id\\\": \\\"$GITHUB_INSTALLATION_ID\\\", \\\"delay\\\": 150}\" || true"
  "before_script": []
  "image": "python:2.7"
  "script":
  - "echo curl -XPOST https://failfast.ci.cnct.io//api/v1/github_statuses -d \"{\\\"ci_project_id\\\": \\\"$CI_PROJECT_ID\\\", \\\"ci_sha\\\": \\\"$CI_BUILD_REF\\\", \\\"sha\\\": \\\"$SHA\\\", \\\"ci_ref\\\": \\\"$CI_COMMIT_REF_NAME\\\", \\\"github_repo\\\": \\\"$GITHUB_REPO\\\", \\\"installation_id\\\": \\\"$GITHUB_INSTALLATION_ID\\\", \\\"delay\\\": 30}\" || true"
  - "echo curl -XPOST https://failfast.ci.cnct.io//api/v1/github_statuses -d \"{\\\"ci_project_id\\\": \\\"$CI_PROJECT_ID\\\", \\\"ci_sha\\\": \\\"$CI_BUILD_REF\\\", \\\"sha\\\": \\\"$SHA\\\", \\\"ci_ref\\\": \\\"$CI_COMMIT_REF_NAME\\\", \\\"github_repo\\\": \\\"$GITHUB_REPO\\\", \\\"installation_id\\\": \\\"$GITHUB_INSTALLATION_ID\\\", \\\"delay\\\": 150}\" || true"
  "stage": "github-status-update"
  "tags":
  - "failfast-ci"
  "when": "always"
"stages":
- "build"
- "test"
- "publish"
- "deploy"
- "github-status-update"
"test":
  "before_script":
  - "mkdir /root/.kube"
  - "echo ${TEST_KUBECONFIG} | base64 -d > /root/.kube/config"
  - "helm init"
  - "helm delete --purge ${RELEASE} || /bin/echo \"${RELEASE} does not exist. Environment is clean.\""
  - "kubectl delete namespace ${NAMESPACE} || /bin/echo \"${NAMESPACE} does not exist. Environment is clean.\""
  "image": "quay.io/samsung_cnct/kraken-tools:v0.8"
  "script":
  - "build/test.sh"
  - "helm install --name ${RELEASE} --namespace ${NAMESPACE} ${APP_NAME}"
  - "kubectl rollout status sts/${DEPLOYMENT} -n ${NAMESPACE}"
  - "helm delete --purge ${RELEASE}"
  - "kubectl delete namespace ${NAMESPACE}"
  "stage": "test"
  "variables":
    "DEPLOYMENT": "${APP_NAME}-${CI_PIPELINE_ID}-${APP_NAME}"
    "NAMESPACE": "${APP_NAME}-test-${CI_PIPELINE_ID}"
    "RELEASE": "${APP_NAME}-${CI_PIPELINE_ID}"
"variables":
  "PROTOC_VERSION": "3.5.1"
  "APP_NAME": "grpc-example"
  "CHART_NAME": "grpc-example"
  "CHART_REGISTRY_URI": "${REGISTRY_HOST}/${REGISTRY_ORG}/${REGISTRY_CHART_NAME}"
  "CI_REF": "refs/heads/master"
  "EVENT": "push"
  "FAILFASTCI_STATUS_API": "https://failfast.ci.cnct.io//api/v1/github_status"
  "GITHUB_INSTALLATION_ID": "64807"
  "GITHUB_REPO": "samsung-cnct/chart-vault-etcd"
  "HELM_REGISTRY_IMAGE": "quay.io/samsung_cnct/helm-registry-agent"
  "HELM_REGISTRY_VERSION": "v0.7.4-helm_2.6"
  "KUBECTL_VERSION": "v1.8.5"
  "PR_ID": ""
  "REF_NAME": "master"
  "REGISTRY_CHART_NAME": "grpc-example"
  "REGISTRY_HOST": "quay.io"
  "REGISTRY_ORG": "samsung_cnct"
  "SHA": "f53efd52a424af41c725dddbd8db187c89dd5b8c"
  "SHA8": "f53efd52"
  "SOURCE_REF": "master"
